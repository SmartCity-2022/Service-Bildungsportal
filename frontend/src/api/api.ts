/* tslint:disable */
/* eslint-disable */
/**
 * Bildungsportal
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Assessment
 */
export interface Assessment {
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    'educationId'?: number;
}
/**
 * 
 * @export
 * @interface AssessmentProperties
 */
export interface AssessmentProperties {
    /**
     * 
     * @type {number}
     * @memberof AssessmentProperties
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AssessmentProperties
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssessmentProperties
     */
    'educationId'?: number;
}
/**
 * 
 * @export
 * @interface Education
 */
export interface Education {
    /**
     * 
     * @type {number}
     * @memberof Education
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Education
     */
    'locationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Education
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface EducationProperties
 */
export interface EducationProperties {
    /**
     * 
     * @type {number}
     * @memberof EducationProperties
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof EducationProperties
     */
    'locationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof EducationProperties
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof EducationProperties
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Grade
 */
export interface Grade {
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'matriculationId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'assessmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'grade': number;
    /**
     * 
     * @type {string}
     * @memberof Grade
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface GradeProperties
 */
export interface GradeProperties {
    /**
     * 
     * @type {number}
     * @memberof GradeProperties
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeProperties
     */
    'matriculationId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeProperties
     */
    'assessmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeProperties
     */
    'grade'?: number;
    /**
     * 
     * @type {string}
     * @memberof GradeProperties
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface Graduation
 */
export interface Graduation {
    /**
     * 
     * @type {number}
     * @memberof Graduation
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Graduation
     */
    'matriculationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Graduation
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface GraduationProperties
 */
export interface GraduationProperties {
    /**
     * 
     * @type {number}
     * @memberof GraduationProperties
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GraduationProperties
     */
    'matriculationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GraduationProperties
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface Institution
 */
export interface Institution {
    /**
     * 
     * @type {number}
     * @memberof Institution
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface InstitutionProperties
 */
export interface InstitutionProperties {
    /**
     * 
     * @type {number}
     * @memberof InstitutionProperties
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InstitutionProperties
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'zip': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'city': string;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'institutionId'?: number;
}
/**
 * 
 * @export
 * @interface LocationProperties
 */
export interface LocationProperties {
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationProperties
     */
    'city'?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationProperties
     */
    'institutionId'?: number;
}
/**
 * 
 * @export
 * @interface Matriculation
 */
export interface Matriculation {
    /**
     * 
     * @type {number}
     * @memberof Matriculation
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Matriculation
     */
    'studentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Matriculation
     */
    'educationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Matriculation
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface MatriculationProperties
 */
export interface MatriculationProperties {
    /**
     * 
     * @type {number}
     * @memberof MatriculationProperties
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof MatriculationProperties
     */
    'studentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MatriculationProperties
     */
    'educationId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MatriculationProperties
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface Qualification
 */
export interface Qualification {
    /**
     * 
     * @type {number}
     * @memberof Qualification
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Qualification
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface QualificationProperties
 */
export interface QualificationProperties {
    /**
     * 
     * @type {number}
     * @memberof QualificationProperties
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QualificationProperties
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualificationProperties
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Student
 */
export interface Student {
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface StudentProperties
 */
export interface StudentProperties {
    /**
     * 
     * @type {number}
     * @memberof StudentProperties
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentProperties
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {Student}
     * @memberof User
     */
    'student'?: Student;
    /**
     * 
     * @type {Institution}
     * @memberof User
     */
    'institution'?: Institution;
}

/**
 * AssessmentApi - axios parameter creator
 * @export
 */
export const AssessmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all assessment of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allAssessmentsOfEducation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allAssessmentsOfEducation', 'id', id)
            const localVarPath = `/education/{id}/assessment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new assessment for specific education
         * @param {number} id Id of education
         * @param {Assessment} assessment New assessment to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssessmentOfEducation: async (id: number, assessment: Assessment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createAssessmentOfEducation', 'id', id)
            // verify required parameter 'assessment' is not null or undefined
            assertParamExists('createAssessmentOfEducation', 'assessment', assessment)
            const localVarPath = `/education/{id}/assessment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assessment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an assessment
         * @param {number} id Id of assessment
         * @param {AssessmentProperties} assessmentProperties Updated assessment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssessment: async (id: number, assessmentProperties: AssessmentProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAssessment', 'id', id)
            // verify required parameter 'assessmentProperties' is not null or undefined
            assertParamExists('updateAssessment', 'assessmentProperties', assessmentProperties)
            const localVarPath = `/assessment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assessmentProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssessmentApi - functional programming interface
 * @export
 */
export const AssessmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssessmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all assessment of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allAssessmentsOfEducation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Assessment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allAssessmentsOfEducation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new assessment for specific education
         * @param {number} id Id of education
         * @param {Assessment} assessment New assessment to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssessmentOfEducation(id: number, assessment: Assessment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssessmentOfEducation(id, assessment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an assessment
         * @param {number} id Id of assessment
         * @param {AssessmentProperties} assessmentProperties Updated assessment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAssessment(id: number, assessmentProperties: AssessmentProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAssessment(id, assessmentProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssessmentApi - factory interface
 * @export
 */
export const AssessmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssessmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all assessment of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allAssessmentsOfEducation(id: number, options?: any): AxiosPromise<Array<Assessment>> {
            return localVarFp.allAssessmentsOfEducation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new assessment for specific education
         * @param {number} id Id of education
         * @param {Assessment} assessment New assessment to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssessmentOfEducation(id: number, assessment: Assessment, options?: any): AxiosPromise<void> {
            return localVarFp.createAssessmentOfEducation(id, assessment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an assessment
         * @param {number} id Id of assessment
         * @param {AssessmentProperties} assessmentProperties Updated assessment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAssessment(id: number, assessmentProperties: AssessmentProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateAssessment(id, assessmentProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssessmentApi - object-oriented interface
 * @export
 * @class AssessmentApi
 * @extends {BaseAPI}
 */
export class AssessmentApi extends BaseAPI {
    /**
     * 
     * @summary Returns all assessment of specific education
     * @param {number} id Id of education
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApi
     */
    public allAssessmentsOfEducation(id: number, options?: AxiosRequestConfig) {
        return AssessmentApiFp(this.configuration).allAssessmentsOfEducation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new assessment for specific education
     * @param {number} id Id of education
     * @param {Assessment} assessment New assessment to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApi
     */
    public createAssessmentOfEducation(id: number, assessment: Assessment, options?: AxiosRequestConfig) {
        return AssessmentApiFp(this.configuration).createAssessmentOfEducation(id, assessment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an assessment
     * @param {number} id Id of assessment
     * @param {AssessmentProperties} assessmentProperties Updated assessment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApi
     */
    public updateAssessment(id: number, assessmentProperties: AssessmentProperties, options?: AxiosRequestConfig) {
        return AssessmentApiFp(this.configuration).updateAssessment(id, assessmentProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EducationApi - axios parameter creator
 * @export
 */
export const EducationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all education of specific location
         * @param {number} id Id of location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEducationsOfLocation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allEducationsOfLocation', 'id', id)
            const localVarPath = `/location/{id}/education`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new education for specific location
         * @param {number} id Id of location
         * @param {Education} education New education to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEducationOfLocation: async (id: number, education: Education, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEducationOfLocation', 'id', id)
            // verify required parameter 'education' is not null or undefined
            assertParamExists('createEducationOfLocation', 'education', education)
            const localVarPath = `/location/{id}/education`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(education, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleEducation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('singleEducation', 'id', id)
            const localVarPath = `/education/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an education
         * @param {number} id Id of education
         * @param {EducationProperties} educationProperties Updated education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEducationOfLocation: async (id: number, educationProperties: EducationProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEducationOfLocation', 'id', id)
            // verify required parameter 'educationProperties' is not null or undefined
            assertParamExists('updateEducationOfLocation', 'educationProperties', educationProperties)
            const localVarPath = `/education/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(educationProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EducationApi - functional programming interface
 * @export
 */
export const EducationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EducationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all education of specific location
         * @param {number} id Id of location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allEducationsOfLocation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Education>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allEducationsOfLocation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new education for specific location
         * @param {number} id Id of location
         * @param {Education} education New education to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEducationOfLocation(id: number, education: Education, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEducationOfLocation(id, education, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleEducation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Education>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleEducation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an education
         * @param {number} id Id of education
         * @param {EducationProperties} educationProperties Updated education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEducationOfLocation(id: number, educationProperties: EducationProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEducationOfLocation(id, educationProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EducationApi - factory interface
 * @export
 */
export const EducationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EducationApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all education of specific location
         * @param {number} id Id of location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEducationsOfLocation(id: number, options?: any): AxiosPromise<Array<Education>> {
            return localVarFp.allEducationsOfLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new education for specific location
         * @param {number} id Id of location
         * @param {Education} education New education to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEducationOfLocation(id: number, education: Education, options?: any): AxiosPromise<void> {
            return localVarFp.createEducationOfLocation(id, education, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleEducation(id: number, options?: any): AxiosPromise<Education> {
            return localVarFp.singleEducation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an education
         * @param {number} id Id of education
         * @param {EducationProperties} educationProperties Updated education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEducationOfLocation(id: number, educationProperties: EducationProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateEducationOfLocation(id, educationProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EducationApi - object-oriented interface
 * @export
 * @class EducationApi
 * @extends {BaseAPI}
 */
export class EducationApi extends BaseAPI {
    /**
     * 
     * @summary Returns all education of specific location
     * @param {number} id Id of location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public allEducationsOfLocation(id: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).allEducationsOfLocation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new education for specific location
     * @param {number} id Id of location
     * @param {Education} education New education to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public createEducationOfLocation(id: number, education: Education, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).createEducationOfLocation(id, education, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns specific education
     * @param {number} id Id of education
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public singleEducation(id: number, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).singleEducation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an education
     * @param {number} id Id of education
     * @param {EducationProperties} educationProperties Updated education
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationApi
     */
    public updateEducationOfLocation(id: number, educationProperties: EducationProperties, options?: AxiosRequestConfig) {
        return EducationApiFp(this.configuration).updateEducationOfLocation(id, educationProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GradeApi - axios parameter creator
 * @export
 */
export const GradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all grade of specific assessment
         * @param {number} id Id of assessment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allGradesOfAssessment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allGradesOfAssessment', 'id', id)
            const localVarPath = `/assessment/{id}/grade`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all grade of specific matriculation
         * @param {number} id Id of matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allGradesOfMatriculation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allGradesOfMatriculation', 'id', id)
            const localVarPath = `/matriculation/{id}/grade`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new grade for specific assessment
         * @param {number} id Id of assessment
         * @param {Grade} grade New grade to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGradeOfAssessment: async (id: number, grade: Grade, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createGradeOfAssessment', 'id', id)
            // verify required parameter 'grade' is not null or undefined
            assertParamExists('createGradeOfAssessment', 'grade', grade)
            const localVarPath = `/assessment/{id}/grade`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grade, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new grade for specific matriculation
         * @param {number} id Id of matriculation
         * @param {Grade} grade New grade to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGradeOfMatriculation: async (id: number, grade: Grade, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createGradeOfMatriculation', 'id', id)
            // verify required parameter 'grade' is not null or undefined
            assertParamExists('createGradeOfMatriculation', 'grade', grade)
            const localVarPath = `/matriculation/{id}/grade`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grade, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an grade
         * @param {number} id Id of grade
         * @param {GradeProperties} gradeProperties Updated grade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrade: async (id: number, gradeProperties: GradeProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGrade', 'id', id)
            // verify required parameter 'gradeProperties' is not null or undefined
            assertParamExists('updateGrade', 'gradeProperties', gradeProperties)
            const localVarPath = `/grade/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gradeProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GradeApi - functional programming interface
 * @export
 */
export const GradeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GradeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all grade of specific assessment
         * @param {number} id Id of assessment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allGradesOfAssessment(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Grade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allGradesOfAssessment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all grade of specific matriculation
         * @param {number} id Id of matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allGradesOfMatriculation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Grade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allGradesOfMatriculation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new grade for specific assessment
         * @param {number} id Id of assessment
         * @param {Grade} grade New grade to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGradeOfAssessment(id: number, grade: Grade, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGradeOfAssessment(id, grade, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new grade for specific matriculation
         * @param {number} id Id of matriculation
         * @param {Grade} grade New grade to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGradeOfMatriculation(id: number, grade: Grade, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGradeOfMatriculation(id, grade, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an grade
         * @param {number} id Id of grade
         * @param {GradeProperties} gradeProperties Updated grade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGrade(id: number, gradeProperties: GradeProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGrade(id, gradeProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GradeApi - factory interface
 * @export
 */
export const GradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GradeApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all grade of specific assessment
         * @param {number} id Id of assessment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allGradesOfAssessment(id: number, options?: any): AxiosPromise<Array<Grade>> {
            return localVarFp.allGradesOfAssessment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all grade of specific matriculation
         * @param {number} id Id of matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allGradesOfMatriculation(id: number, options?: any): AxiosPromise<Array<Grade>> {
            return localVarFp.allGradesOfMatriculation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new grade for specific assessment
         * @param {number} id Id of assessment
         * @param {Grade} grade New grade to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGradeOfAssessment(id: number, grade: Grade, options?: any): AxiosPromise<void> {
            return localVarFp.createGradeOfAssessment(id, grade, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new grade for specific matriculation
         * @param {number} id Id of matriculation
         * @param {Grade} grade New grade to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGradeOfMatriculation(id: number, grade: Grade, options?: any): AxiosPromise<void> {
            return localVarFp.createGradeOfMatriculation(id, grade, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an grade
         * @param {number} id Id of grade
         * @param {GradeProperties} gradeProperties Updated grade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrade(id: number, gradeProperties: GradeProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateGrade(id, gradeProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GradeApi - object-oriented interface
 * @export
 * @class GradeApi
 * @extends {BaseAPI}
 */
export class GradeApi extends BaseAPI {
    /**
     * 
     * @summary Returns all grade of specific assessment
     * @param {number} id Id of assessment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradeApi
     */
    public allGradesOfAssessment(id: number, options?: AxiosRequestConfig) {
        return GradeApiFp(this.configuration).allGradesOfAssessment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all grade of specific matriculation
     * @param {number} id Id of matriculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradeApi
     */
    public allGradesOfMatriculation(id: number, options?: AxiosRequestConfig) {
        return GradeApiFp(this.configuration).allGradesOfMatriculation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new grade for specific assessment
     * @param {number} id Id of assessment
     * @param {Grade} grade New grade to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradeApi
     */
    public createGradeOfAssessment(id: number, grade: Grade, options?: AxiosRequestConfig) {
        return GradeApiFp(this.configuration).createGradeOfAssessment(id, grade, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new grade for specific matriculation
     * @param {number} id Id of matriculation
     * @param {Grade} grade New grade to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradeApi
     */
    public createGradeOfMatriculation(id: number, grade: Grade, options?: AxiosRequestConfig) {
        return GradeApiFp(this.configuration).createGradeOfMatriculation(id, grade, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an grade
     * @param {number} id Id of grade
     * @param {GradeProperties} gradeProperties Updated grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GradeApi
     */
    public updateGrade(id: number, gradeProperties: GradeProperties, options?: AxiosRequestConfig) {
        return GradeApiFp(this.configuration).updateGrade(id, gradeProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GraduationApi - axios parameter creator
 * @export
 */
export const GraduationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all graduation of specific matriculation
         * @param {number} id Id of matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allGraduationsOfMatriculation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allGraduationsOfMatriculation', 'id', id)
            const localVarPath = `/matriculation/{id}/graduation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new graduation for specific matriculation
         * @param {number} id Id of matriculation
         * @param {Graduation} graduation New graduation to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGraduationOfMatriculation: async (id: number, graduation: Graduation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createGraduationOfMatriculation', 'id', id)
            // verify required parameter 'graduation' is not null or undefined
            assertParamExists('createGraduationOfMatriculation', 'graduation', graduation)
            const localVarPath = `/matriculation/{id}/graduation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(graduation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an graduation
         * @param {number} id Id of graduation
         * @param {GraduationProperties} graduationProperties Updated graduation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGraduation: async (id: number, graduationProperties: GraduationProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGraduation', 'id', id)
            // verify required parameter 'graduationProperties' is not null or undefined
            assertParamExists('updateGraduation', 'graduationProperties', graduationProperties)
            const localVarPath = `/graduation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(graduationProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraduationApi - functional programming interface
 * @export
 */
export const GraduationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GraduationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all graduation of specific matriculation
         * @param {number} id Id of matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allGraduationsOfMatriculation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Graduation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allGraduationsOfMatriculation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new graduation for specific matriculation
         * @param {number} id Id of matriculation
         * @param {Graduation} graduation New graduation to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGraduationOfMatriculation(id: number, graduation: Graduation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGraduationOfMatriculation(id, graduation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an graduation
         * @param {number} id Id of graduation
         * @param {GraduationProperties} graduationProperties Updated graduation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGraduation(id: number, graduationProperties: GraduationProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGraduation(id, graduationProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GraduationApi - factory interface
 * @export
 */
export const GraduationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GraduationApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all graduation of specific matriculation
         * @param {number} id Id of matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allGraduationsOfMatriculation(id: number, options?: any): AxiosPromise<Array<Graduation>> {
            return localVarFp.allGraduationsOfMatriculation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new graduation for specific matriculation
         * @param {number} id Id of matriculation
         * @param {Graduation} graduation New graduation to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGraduationOfMatriculation(id: number, graduation: Graduation, options?: any): AxiosPromise<void> {
            return localVarFp.createGraduationOfMatriculation(id, graduation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an graduation
         * @param {number} id Id of graduation
         * @param {GraduationProperties} graduationProperties Updated graduation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGraduation(id: number, graduationProperties: GraduationProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateGraduation(id, graduationProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GraduationApi - object-oriented interface
 * @export
 * @class GraduationApi
 * @extends {BaseAPI}
 */
export class GraduationApi extends BaseAPI {
    /**
     * 
     * @summary Returns all graduation of specific matriculation
     * @param {number} id Id of matriculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraduationApi
     */
    public allGraduationsOfMatriculation(id: number, options?: AxiosRequestConfig) {
        return GraduationApiFp(this.configuration).allGraduationsOfMatriculation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new graduation for specific matriculation
     * @param {number} id Id of matriculation
     * @param {Graduation} graduation New graduation to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraduationApi
     */
    public createGraduationOfMatriculation(id: number, graduation: Graduation, options?: AxiosRequestConfig) {
        return GraduationApiFp(this.configuration).createGraduationOfMatriculation(id, graduation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an graduation
     * @param {number} id Id of graduation
     * @param {GraduationProperties} graduationProperties Updated graduation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraduationApi
     */
    public updateGraduation(id: number, graduationProperties: GraduationProperties, options?: AxiosRequestConfig) {
        return GraduationApiFp(this.configuration).updateGraduation(id, graduationProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstitutionApi - axios parameter creator
 * @export
 */
export const InstitutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all available institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allInstitutions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/institution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new institution
         * @param {Institution} institution New institution to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstitution: async (institution: Institution, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'institution' is not null or undefined
            assertParamExists('createInstitution', 'institution', institution)
            const localVarPath = `/institution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(institution, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns specific institution
         * @param {number} id Id of institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleInstitution: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('singleInstitution', 'id', id)
            const localVarPath = `/institution/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an institution
         * @param {number} id Id of institution
         * @param {InstitutionProperties} institutionProperties New institution to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstitution: async (id: number, institutionProperties: InstitutionProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateInstitution', 'id', id)
            // verify required parameter 'institutionProperties' is not null or undefined
            assertParamExists('updateInstitution', 'institutionProperties', institutionProperties)
            const localVarPath = `/institution/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(institutionProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstitutionApi - functional programming interface
 * @export
 */
export const InstitutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstitutionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all available institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allInstitutions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Institution>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allInstitutions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new institution
         * @param {Institution} institution New institution to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstitution(institution: Institution, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstitution(institution, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns specific institution
         * @param {number} id Id of institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleInstitution(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleInstitution(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an institution
         * @param {number} id Id of institution
         * @param {InstitutionProperties} institutionProperties New institution to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstitution(id: number, institutionProperties: InstitutionProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstitution(id, institutionProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstitutionApi - factory interface
 * @export
 */
export const InstitutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstitutionApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all available institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allInstitutions(options?: any): AxiosPromise<Array<Institution>> {
            return localVarFp.allInstitutions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new institution
         * @param {Institution} institution New institution to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstitution(institution: Institution, options?: any): AxiosPromise<void> {
            return localVarFp.createInstitution(institution, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns specific institution
         * @param {number} id Id of institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleInstitution(id: number, options?: any): AxiosPromise<Institution> {
            return localVarFp.singleInstitution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an institution
         * @param {number} id Id of institution
         * @param {InstitutionProperties} institutionProperties New institution to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstitution(id: number, institutionProperties: InstitutionProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateInstitution(id, institutionProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstitutionApi - object-oriented interface
 * @export
 * @class InstitutionApi
 * @extends {BaseAPI}
 */
export class InstitutionApi extends BaseAPI {
    /**
     * 
     * @summary Returns all available institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionApi
     */
    public allInstitutions(options?: AxiosRequestConfig) {
        return InstitutionApiFp(this.configuration).allInstitutions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new institution
     * @param {Institution} institution New institution to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionApi
     */
    public createInstitution(institution: Institution, options?: AxiosRequestConfig) {
        return InstitutionApiFp(this.configuration).createInstitution(institution, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns specific institution
     * @param {number} id Id of institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionApi
     */
    public singleInstitution(id: number, options?: AxiosRequestConfig) {
        return InstitutionApiFp(this.configuration).singleInstitution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an institution
     * @param {number} id Id of institution
     * @param {InstitutionProperties} institutionProperties New institution to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionApi
     */
    public updateInstitution(id: number, institutionProperties: InstitutionProperties, options?: AxiosRequestConfig) {
        return InstitutionApiFp(this.configuration).updateInstitution(id, institutionProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all location of specific institution
         * @param {number} id Id of institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allLocationsOfInstitution: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allLocationsOfInstitution', 'id', id)
            const localVarPath = `/institution/{id}/location`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new location for specific institution
         * @param {number} id Id of institution
         * @param {Location} location New location to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocationOfInstitution: async (id: number, location: Location, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createLocationOfInstitution', 'id', id)
            // verify required parameter 'location' is not null or undefined
            assertParamExists('createLocationOfInstitution', 'location', location)
            const localVarPath = `/institution/{id}/location`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(location, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns specific location
         * @param {number} id Id of location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleLocation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('singleLocation', 'id', id)
            const localVarPath = `/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an location
         * @param {number} id Id of location
         * @param {LocationProperties} locationProperties Updated location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (id: number, locationProperties: LocationProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateLocation', 'id', id)
            // verify required parameter 'locationProperties' is not null or undefined
            assertParamExists('updateLocation', 'locationProperties', locationProperties)
            const localVarPath = `/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all location of specific institution
         * @param {number} id Id of institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allLocationsOfInstitution(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allLocationsOfInstitution(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new location for specific institution
         * @param {number} id Id of institution
         * @param {Location} location New location to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocationOfInstitution(id: number, location: Location, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLocationOfInstitution(id, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns specific location
         * @param {number} id Id of location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleLocation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleLocation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an location
         * @param {number} id Id of location
         * @param {LocationProperties} locationProperties Updated location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(id: number, locationProperties: LocationProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(id, locationProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all location of specific institution
         * @param {number} id Id of institution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allLocationsOfInstitution(id: number, options?: any): AxiosPromise<Array<Location>> {
            return localVarFp.allLocationsOfInstitution(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new location for specific institution
         * @param {number} id Id of institution
         * @param {Location} location New location to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocationOfInstitution(id: number, location: Location, options?: any): AxiosPromise<void> {
            return localVarFp.createLocationOfInstitution(id, location, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns specific location
         * @param {number} id Id of location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleLocation(id: number, options?: any): AxiosPromise<Location> {
            return localVarFp.singleLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an location
         * @param {number} id Id of location
         * @param {LocationProperties} locationProperties Updated location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(id: number, locationProperties: LocationProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateLocation(id, locationProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * 
     * @summary Returns all location of specific institution
     * @param {number} id Id of institution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public allLocationsOfInstitution(id: number, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).allLocationsOfInstitution(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new location for specific institution
     * @param {number} id Id of institution
     * @param {Location} location New location to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public createLocationOfInstitution(id: number, location: Location, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).createLocationOfInstitution(id, location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns specific location
     * @param {number} id Id of location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public singleLocation(id: number, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).singleLocation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an location
     * @param {number} id Id of location
     * @param {LocationProperties} locationProperties Updated location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public updateLocation(id: number, locationProperties: LocationProperties, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).updateLocation(id, locationProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MatriculationApi - axios parameter creator
 * @export
 */
export const MatriculationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all matriculation of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allMatriculationsOfEducation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allMatriculationsOfEducation', 'id', id)
            const localVarPath = `/education/{id}/matriculation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all matriculation of specific student
         * @param {number} id Id of student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allMatriculationsOfStudent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allMatriculationsOfStudent', 'id', id)
            const localVarPath = `/student/{id}/matriculation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new matriculation for specific education
         * @param {number} id Id of education
         * @param {number} body Student id for matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatriculationOfEducation: async (id: number, body: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createMatriculationOfEducation', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createMatriculationOfEducation', 'body', body)
            const localVarPath = `/education/{id}/matriculation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new matriculation for specific student
         * @param {number} id Id of student
         * @param {Matriculation} matriculation New matriculation to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatriculationOfStudent: async (id: number, matriculation: Matriculation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createMatriculationOfStudent', 'id', id)
            // verify required parameter 'matriculation' is not null or undefined
            assertParamExists('createMatriculationOfStudent', 'matriculation', matriculation)
            const localVarPath = `/student/{id}/matriculation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matriculation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns matriculations of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myMatriculations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/matriculation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an matriculation
         * @param {number} id Id of matriculation
         * @param {MatriculationProperties} matriculationProperties Updated matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatriculation: async (id: number, matriculationProperties: MatriculationProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMatriculation', 'id', id)
            // verify required parameter 'matriculationProperties' is not null or undefined
            assertParamExists('updateMatriculation', 'matriculationProperties', matriculationProperties)
            const localVarPath = `/matriculation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matriculationProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatriculationApi - functional programming interface
 * @export
 */
export const MatriculationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatriculationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all matriculation of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allMatriculationsOfEducation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Matriculation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allMatriculationsOfEducation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all matriculation of specific student
         * @param {number} id Id of student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allMatriculationsOfStudent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Matriculation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allMatriculationsOfStudent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new matriculation for specific education
         * @param {number} id Id of education
         * @param {number} body Student id for matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMatriculationOfEducation(id: number, body: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMatriculationOfEducation(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new matriculation for specific student
         * @param {number} id Id of student
         * @param {Matriculation} matriculation New matriculation to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMatriculationOfStudent(id: number, matriculation: Matriculation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMatriculationOfStudent(id, matriculation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns matriculations of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myMatriculations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Matriculation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myMatriculations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an matriculation
         * @param {number} id Id of matriculation
         * @param {MatriculationProperties} matriculationProperties Updated matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMatriculation(id: number, matriculationProperties: MatriculationProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMatriculation(id, matriculationProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MatriculationApi - factory interface
 * @export
 */
export const MatriculationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatriculationApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all matriculation of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allMatriculationsOfEducation(id: number, options?: any): AxiosPromise<Array<Matriculation>> {
            return localVarFp.allMatriculationsOfEducation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all matriculation of specific student
         * @param {number} id Id of student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allMatriculationsOfStudent(id: number, options?: any): AxiosPromise<Array<Matriculation>> {
            return localVarFp.allMatriculationsOfStudent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new matriculation for specific education
         * @param {number} id Id of education
         * @param {number} body Student id for matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatriculationOfEducation(id: number, body: number, options?: any): AxiosPromise<void> {
            return localVarFp.createMatriculationOfEducation(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new matriculation for specific student
         * @param {number} id Id of student
         * @param {Matriculation} matriculation New matriculation to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatriculationOfStudent(id: number, matriculation: Matriculation, options?: any): AxiosPromise<void> {
            return localVarFp.createMatriculationOfStudent(id, matriculation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns matriculations of the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myMatriculations(options?: any): AxiosPromise<Array<Matriculation>> {
            return localVarFp.myMatriculations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an matriculation
         * @param {number} id Id of matriculation
         * @param {MatriculationProperties} matriculationProperties Updated matriculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatriculation(id: number, matriculationProperties: MatriculationProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateMatriculation(id, matriculationProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatriculationApi - object-oriented interface
 * @export
 * @class MatriculationApi
 * @extends {BaseAPI}
 */
export class MatriculationApi extends BaseAPI {
    /**
     * 
     * @summary Returns all matriculation of specific education
     * @param {number} id Id of education
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatriculationApi
     */
    public allMatriculationsOfEducation(id: number, options?: AxiosRequestConfig) {
        return MatriculationApiFp(this.configuration).allMatriculationsOfEducation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all matriculation of specific student
     * @param {number} id Id of student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatriculationApi
     */
    public allMatriculationsOfStudent(id: number, options?: AxiosRequestConfig) {
        return MatriculationApiFp(this.configuration).allMatriculationsOfStudent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new matriculation for specific education
     * @param {number} id Id of education
     * @param {number} body Student id for matriculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatriculationApi
     */
    public createMatriculationOfEducation(id: number, body: number, options?: AxiosRequestConfig) {
        return MatriculationApiFp(this.configuration).createMatriculationOfEducation(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new matriculation for specific student
     * @param {number} id Id of student
     * @param {Matriculation} matriculation New matriculation to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatriculationApi
     */
    public createMatriculationOfStudent(id: number, matriculation: Matriculation, options?: AxiosRequestConfig) {
        return MatriculationApiFp(this.configuration).createMatriculationOfStudent(id, matriculation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns matriculations of the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatriculationApi
     */
    public myMatriculations(options?: AxiosRequestConfig) {
        return MatriculationApiFp(this.configuration).myMatriculations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an matriculation
     * @param {number} id Id of matriculation
     * @param {MatriculationProperties} matriculationProperties Updated matriculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatriculationApi
     */
    public updateMatriculation(id: number, matriculationProperties: MatriculationProperties, options?: AxiosRequestConfig) {
        return MatriculationApiFp(this.configuration).updateMatriculation(id, matriculationProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QualificationApi - axios parameter creator
 * @export
 */
export const QualificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all available qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allQualifications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all possible qualifications of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allQualificationsOfEducation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allQualificationsOfEducation', 'id', id)
            const localVarPath = `/education/{id}/qualification`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new qualification
         * @param {Qualification} qualification New qualification to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQualification: async (qualification: Qualification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualification' is not null or undefined
            assertParamExists('createQualification', 'qualification', qualification)
            const localVarPath = `/qualification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns specific qualification
         * @param {number} id Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleQualification: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('singleQualification', 'id', id)
            const localVarPath = `/qualification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an qualification
         * @param {number} id Id of qualification
         * @param {QualificationProperties} qualificationProperties Updated qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQualification: async (id: number, qualificationProperties: QualificationProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateQualification', 'id', id)
            // verify required parameter 'qualificationProperties' is not null or undefined
            assertParamExists('updateQualification', 'qualificationProperties', qualificationProperties)
            const localVarPath = `/qualification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualificationProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QualificationApi - functional programming interface
 * @export
 */
export const QualificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QualificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all available qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allQualifications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Qualification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allQualifications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all possible qualifications of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allQualificationsOfEducation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allQualificationsOfEducation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new qualification
         * @param {Qualification} qualification New qualification to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQualification(qualification: Qualification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQualification(qualification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns specific qualification
         * @param {number} id Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleQualification(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Qualification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleQualification(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an qualification
         * @param {number} id Id of qualification
         * @param {QualificationProperties} qualificationProperties Updated qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQualification(id: number, qualificationProperties: QualificationProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQualification(id, qualificationProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QualificationApi - factory interface
 * @export
 */
export const QualificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QualificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all available qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allQualifications(options?: any): AxiosPromise<Array<Qualification>> {
            return localVarFp.allQualifications(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all possible qualifications of specific education
         * @param {number} id Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allQualificationsOfEducation(id: number, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.allQualificationsOfEducation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new qualification
         * @param {Qualification} qualification New qualification to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQualification(qualification: Qualification, options?: any): AxiosPromise<void> {
            return localVarFp.createQualification(qualification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns specific qualification
         * @param {number} id Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleQualification(id: number, options?: any): AxiosPromise<Qualification> {
            return localVarFp.singleQualification(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an qualification
         * @param {number} id Id of qualification
         * @param {QualificationProperties} qualificationProperties Updated qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQualification(id: number, qualificationProperties: QualificationProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateQualification(id, qualificationProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QualificationApi - object-oriented interface
 * @export
 * @class QualificationApi
 * @extends {BaseAPI}
 */
export class QualificationApi extends BaseAPI {
    /**
     * 
     * @summary Returns all available qualification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public allQualifications(options?: AxiosRequestConfig) {
        return QualificationApiFp(this.configuration).allQualifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all possible qualifications of specific education
     * @param {number} id Id of education
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public allQualificationsOfEducation(id: number, options?: AxiosRequestConfig) {
        return QualificationApiFp(this.configuration).allQualificationsOfEducation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new qualification
     * @param {Qualification} qualification New qualification to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public createQualification(qualification: Qualification, options?: AxiosRequestConfig) {
        return QualificationApiFp(this.configuration).createQualification(qualification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns specific qualification
     * @param {number} id Id of qualification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public singleQualification(id: number, options?: AxiosRequestConfig) {
        return QualificationApiFp(this.configuration).singleQualification(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an qualification
     * @param {number} id Id of qualification
     * @param {QualificationProperties} qualificationProperties Updated qualification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationApi
     */
    public updateQualification(id: number, qualificationProperties: QualificationProperties, options?: AxiosRequestConfig) {
        return QualificationApiFp(this.configuration).updateQualification(id, qualificationProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequirementApi - axios parameter creator
 * @export
 */
export const RequirementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds a possible education for specific qualification
         * @param {number} id Id of qualification
         * @param {Array<number>} requestBody List of education ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEducationsOfQualification: async (id: number, requestBody: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addEducationsOfQualification', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addEducationsOfQualification', 'requestBody', requestBody)
            const localVarPath = `/qualification/{id}/education`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a possible qualification for specific education
         * @param {number} id Id of education
         * @param {Array<number>} requestBody List of qualification ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQualificationsOfEducation: async (id: number, requestBody: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addQualificationsOfEducation', 'id', id)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addQualificationsOfEducation', 'requestBody', requestBody)
            const localVarPath = `/education/{id}/qualification`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all possible educations of specific qualification
         * @param {number} id Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEducationsOfQualification: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('allEducationsOfQualification', 'id', id)
            const localVarPath = `/qualification/{id}/education`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a possible educations for specific qualification
         * @param {number} qualificationId Id of qualification
         * @param {number} educationId Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEducationsOfQualification: async (qualificationId: number, educationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualificationId' is not null or undefined
            assertParamExists('removeEducationsOfQualification', 'qualificationId', qualificationId)
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('removeEducationsOfQualification', 'educationId', educationId)
            const localVarPath = `/qualification/{qualificationId}/education/{educationId}`
                .replace(`{${"qualificationId"}}`, encodeURIComponent(String(qualificationId)))
                .replace(`{${"educationId"}}`, encodeURIComponent(String(educationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a possible qualifications for specific education
         * @param {number} educationId Id of education
         * @param {number} qualificationId Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeQualificationsOfEducation: async (educationId: number, qualificationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'educationId' is not null or undefined
            assertParamExists('removeQualificationsOfEducation', 'educationId', educationId)
            // verify required parameter 'qualificationId' is not null or undefined
            assertParamExists('removeQualificationsOfEducation', 'qualificationId', qualificationId)
            const localVarPath = `/education/{educationId}/qualification/{qualificationId}`
                .replace(`{${"educationId"}}`, encodeURIComponent(String(educationId)))
                .replace(`{${"qualificationId"}}`, encodeURIComponent(String(qualificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequirementApi - functional programming interface
 * @export
 */
export const RequirementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequirementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds a possible education for specific qualification
         * @param {number} id Id of qualification
         * @param {Array<number>} requestBody List of education ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEducationsOfQualification(id: number, requestBody: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEducationsOfQualification(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds a possible qualification for specific education
         * @param {number} id Id of education
         * @param {Array<number>} requestBody List of qualification ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQualificationsOfEducation(id: number, requestBody: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQualificationsOfEducation(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all possible educations of specific qualification
         * @param {number} id Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allEducationsOfQualification(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allEducationsOfQualification(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes a possible educations for specific qualification
         * @param {number} qualificationId Id of qualification
         * @param {number} educationId Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEducationsOfQualification(qualificationId: number, educationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEducationsOfQualification(qualificationId, educationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes a possible qualifications for specific education
         * @param {number} educationId Id of education
         * @param {number} qualificationId Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeQualificationsOfEducation(educationId: number, qualificationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeQualificationsOfEducation(educationId, qualificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequirementApi - factory interface
 * @export
 */
export const RequirementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequirementApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds a possible education for specific qualification
         * @param {number} id Id of qualification
         * @param {Array<number>} requestBody List of education ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEducationsOfQualification(id: number, requestBody: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addEducationsOfQualification(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a possible qualification for specific education
         * @param {number} id Id of education
         * @param {Array<number>} requestBody List of qualification ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQualificationsOfEducation(id: number, requestBody: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addQualificationsOfEducation(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all possible educations of specific qualification
         * @param {number} id Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEducationsOfQualification(id: number, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.allEducationsOfQualification(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a possible educations for specific qualification
         * @param {number} qualificationId Id of qualification
         * @param {number} educationId Id of education
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEducationsOfQualification(qualificationId: number, educationId: number, options?: any): AxiosPromise<void> {
            return localVarFp.removeEducationsOfQualification(qualificationId, educationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a possible qualifications for specific education
         * @param {number} educationId Id of education
         * @param {number} qualificationId Id of qualification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeQualificationsOfEducation(educationId: number, qualificationId: number, options?: any): AxiosPromise<void> {
            return localVarFp.removeQualificationsOfEducation(educationId, qualificationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequirementApi - object-oriented interface
 * @export
 * @class RequirementApi
 * @extends {BaseAPI}
 */
export class RequirementApi extends BaseAPI {
    /**
     * 
     * @summary Adds a possible education for specific qualification
     * @param {number} id Id of qualification
     * @param {Array<number>} requestBody List of education ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementApi
     */
    public addEducationsOfQualification(id: number, requestBody: Array<number>, options?: AxiosRequestConfig) {
        return RequirementApiFp(this.configuration).addEducationsOfQualification(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a possible qualification for specific education
     * @param {number} id Id of education
     * @param {Array<number>} requestBody List of qualification ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementApi
     */
    public addQualificationsOfEducation(id: number, requestBody: Array<number>, options?: AxiosRequestConfig) {
        return RequirementApiFp(this.configuration).addQualificationsOfEducation(id, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all possible educations of specific qualification
     * @param {number} id Id of qualification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementApi
     */
    public allEducationsOfQualification(id: number, options?: AxiosRequestConfig) {
        return RequirementApiFp(this.configuration).allEducationsOfQualification(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a possible educations for specific qualification
     * @param {number} qualificationId Id of qualification
     * @param {number} educationId Id of education
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementApi
     */
    public removeEducationsOfQualification(qualificationId: number, educationId: number, options?: AxiosRequestConfig) {
        return RequirementApiFp(this.configuration).removeEducationsOfQualification(qualificationId, educationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a possible qualifications for specific education
     * @param {number} educationId Id of education
     * @param {number} qualificationId Id of qualification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementApi
     */
    public removeQualificationsOfEducation(educationId: number, qualificationId: number, options?: AxiosRequestConfig) {
        return RequirementApiFp(this.configuration).removeQualificationsOfEducation(educationId, qualificationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all available student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allStudents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new student
         * @param {Student} student New student to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudent: async (student: Student, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'student' is not null or undefined
            assertParamExists('createStudent', 'student', student)
            const localVarPath = `/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(student, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns specific student
         * @param {number} id Id of student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleStudent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('singleStudent', 'id', id)
            const localVarPath = `/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an student
         * @param {number} id Id of student
         * @param {StudentProperties} studentProperties Updated student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent: async (id: number, studentProperties: StudentProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudent', 'id', id)
            // verify required parameter 'studentProperties' is not null or undefined
            assertParamExists('updateStudent', 'studentProperties', studentProperties)
            const localVarPath = `/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all available student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allStudents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Student>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allStudents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new student
         * @param {Student} student New student to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudent(student: Student, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudent(student, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns specific student
         * @param {number} id Id of student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleStudent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleStudent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an student
         * @param {number} id Id of student
         * @param {StudentProperties} studentProperties Updated student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudent(id: number, studentProperties: StudentProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudent(id, studentProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all available student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allStudents(options?: any): AxiosPromise<Array<Student>> {
            return localVarFp.allStudents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new student
         * @param {Student} student New student to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudent(student: Student, options?: any): AxiosPromise<void> {
            return localVarFp.createStudent(student, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns specific student
         * @param {number} id Id of student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleStudent(id: number, options?: any): AxiosPromise<Student> {
            return localVarFp.singleStudent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an student
         * @param {number} id Id of student
         * @param {StudentProperties} studentProperties Updated student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudent(id: number, studentProperties: StudentProperties, options?: any): AxiosPromise<void> {
            return localVarFp.updateStudent(id, studentProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @summary Returns all available student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public allStudents(options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).allStudents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new student
     * @param {Student} student New student to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public createStudent(student: Student, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).createStudent(student, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns specific student
     * @param {number} id Id of student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public singleStudent(id: number, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).singleStudent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an student
     * @param {number} id Id of student
     * @param {StudentProperties} studentProperties Updated student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public updateStudent(id: number, studentProperties: StudentProperties, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).updateStudent(id, studentProperties, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns information about the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns information about the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async me(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns information about the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me(options?: any): AxiosPromise<User> {
            return localVarFp.me(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Returns information about the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public me(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).me(options).then((request) => request(this.axios, this.basePath));
    }
}


